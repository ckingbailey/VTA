{# each data item expects the format
##  '<--fieldName-->' => [
##      'value' =>
##      ('collapse') =>
##      ('cellWd') => // cell width calculation uses a 24-col system so whatever number is passed as cellWd will get x/24 * 100%
##      ('href') =>
#}  ]

{# CREATETABLE OUGHT TO ALSO HANDLE:
##   • mapping of collapse classes from headings to cells
##   • appending of ID to href's
#}
{% macro createTable(data, headings) %}
    {% import _self as tables %}
    <table class='table table-responsive table-layout-fixed'>
        <thead>
            <tr>
                {{ tables.createHeadings(headings) }}
            </tr>
        </thead>
        <tbody style='width: 100%'>
            {% for row in data %}
                {{ tables.createRow(row, headings) }}
            {% endfor %}
        </tbody>
    </table>
{% endmacro %}

{% macro createHeadings(headings) %}
    {% import _self as tables %}
    {% for heading in headings %}
        {% if not heading is iterable %}
            <th>{{ heading }}</th>
        {% else %}
            {{ tables.createHeadingFromArray(heading) }}
        {% endif %}
    {% endfor %}
{% endmacro%}

{% macro createHeadingFromArray(array) %}
    {% set cellWd = array.cellWd is empty ? '' : 'width: ' ~ (array.cellWd / 24 * 100)|round(0, 'floor') ~ '%' %}
    {% set collapse = array.collapse is empty ? '' : 'collapse-' ~ array.collapse %}
    <th
        scope='col'
        class='{{ collapse }}'
        style='{{ cellWd }}'
    >{{ array.value }}</th>
{% endmacro %}

{% macro createRow(row, headings) %}
    {% import _self as tables %}
    {# id field must exist and must be named 'ID' #}
    {% set equalSign = '=' %}
    {% set id %}
        {% if not row.ID is empty %}
            {{ row.ID is iterable ? row.ID.value|trim : row.ID|trim }}
        {% else %}{% endif %}
    {% endset %}
    <tr>
        {% for fieldName, field in row %}
            {# check for href current field #}
            
            {% if not field.href is empty %}
                {% set href = not field.href|trim|last is same as(equalSign) ? field.href|trim : field.href|trim ~ id %}
            {% elseif not headings[fieldName].href is empty %}
                {% set href = not headings[fieldName].href|trim|last is same as(equalSign)? headings[fieldName].href|trim ~ id %}
            {% else %}{% endif %}
            {% if not field is iterable %}
                {# if field is simple scalar then check for href on heading for field #}
                {% set cellContent %}
                    {% if not href is empty %}
                        {{ href }}
                    {% else %}{{- field|trim -}}{% endif %}
                {% endset %}
                <td>{{- cellContent|trim -}}</td>
            {% else %}
                {# headings and data keys must match #}
                {{ tables.createCellFromArray(field, headings[fieldName]) }}
            {% endif %}
        {% endfor %}
    </tr>
{% endmacro %}

{% macro createCellFromArray(field, heading) %}
    {% import _self as tables %}
    {% set cellContent %}
        {% if not field.href is empty %}
            tables.anchorTag(field.href, field.value)
        {% elseif not heading.href is empty %}
            {{ heading.href }}
        {% else %} {{ field.value }}
        {% endif %}
    {% endset %}
    {% set cellAttrs = field.collapse is empty ? '' : 'class=collapse-' ~ field.collapse %}
    <td {{ cellAttrs }}>{{ cellContent }}</td>
{% endmacro %}

{% macro anchorTag(href, text) %}
    <a href='{{- href|trim -}}'>{{ text }}</a>
{% endmacro %}
